)]}'
{"version":3,"sources":["treyyoder:atc/atc.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,c;AACA,qC;AACA,kB;AACA,uC;AACA,oC;AACA,sB;AACA,2B;AACA,yB;AACA,a;;AAEA,wB;AACA,qB;AACA,wD;AACA,6C;AACA,2D;AACA,gB;AACA,0B;AACA,2B;AACA,2C;AACA,+B;AACA,K;;AAEA,c;AACA,G;;AAEA,mC;AACA,8C;AACA,oD;AACA,G;;AAEA,oC;AACA,2D;AACA,G;;AAEA,gC;AACA,mE;AACA,G;;AAEA,wC;AACA,4D;AACA,G;;AAEA,yC;AACA,6B;AACA,2B;AACA,G;;AAEA,kC;AACA,4B;AACA,oD;AACA,sB;AACA,iC;AACA,O;AACA,yB;AACA,uB;AACA,gC;AACA,mE;AACA,+B;;AAEA,oC;AACA,kD;;AAEA,+D;;AAEA,8B;AACA,sC;;AAEA,6D;AACA,wD;AACA,sB;AACA,mB;AACA,sB;AACA,I;;AAEA,kD;AACA,qC;AACA,2B;AACA,G;AACA,+D;AACA,0C;;AAEA,iE;;AAEA,gE;;AAEA,mE;AACA,4B;;AAEA,+D;AACA,4B;;AAEA,2D;AACA,gE;;AAEA,4C;;AAEA,wD;AACA,2D;AACA,wB;AACA,kB;AACA,e;AACA,kB;AACA,oB;;AAEA,8B;;AAEA,yD;AACA,oB;;AAEA,4B;AACA,yB;AACA,uB;AACA,K;;AAEA,yD;;AAEA,G;;AAEA,kD;AACA,+F;AACA,oC;AACA,wC;AACA,sC;AACA,4B;AACA,U;AACA,G;;AAEA,yD;AACA,wB;;AAEA,oD;AACA,4D;AACA,gC;AACA,2C;AACA,mE;AACA,iE;AACA,2C;AACA,iE;AACA,qD;AACA,qD;AACA,sD;AACA,sD;AACA,uC;AACA,G;AACA,oB;AACA,gC;;AAEA,yC;AACA,oE;AACA,oB;AACA,iB;AACA,oB;AACA,I;;AAEA,mE;AACA,sB;AACA,uC;AACA,gD;AACA,kD;AACA,I;;AAEA,0C;;AAEA,+D;AACA,0D;AACA,uB;AACA,W;AACA,I;AACA,G;AACA,G;AACA,6B;AACA,qC;AACA,kE;AACA,wD;AACA,6D;AACA,+C;AACA,I;AACA,G;AACA,E;AACA,C","file":"/packages/treyyoder_atc.js","sourcesContent":["Meteor.ATC = {\n\tintervalRate : 1000, // milliseconds\n\tsquawkRate : 100,\n\tspeedRange : [ 500, 1000000 ], // km/h\n\tmilliSecondInHour : 1000 * 60 * 60,\n\tlandingDistance : 20,\n\tcurrentPlanesAirborne : 0,\n\ttrackLineIntervals : [],\n\tinfo : null,\n\n\tgetPlane : function() {\n\t\tvar icon = L.icon({\n\t\t\ticonUrl : '/packages/treyyoder_atc/images/plane.png',\n\t\t\ticonSize : [ 15, 20 ], // size of the icon\n\t\t\ticonAnchor : [ 7.5, 0 ], // point of the icon which will\n\t\t\t// correspond\n\t\t\t// to marker's location\n\t\t\tpopupAnchor : [ 0, -10 ]\n\t\t// point from which the popup should open\n\t\t// relative to the iconAnchor\n\t\t});\n\n\t\treturn icon;\n\t},\n\n\tstartTraffic : function(airport) {\n\t\tvar ms = Meteor.ATC.getRandomInt(1000, 5000)\n\t\tsetInterval(Meteor.ATC.createFlight, ms, airport);\n\t},\n\n\tgetRandomInt : function(min, max) {\n\t\treturn Math.floor(Math.random() * (max - min + 1)) + min;\n\t},\n\n\tgetRandomAirport : function() {\n\t\treturn Airports[Meteor.ATC.getRandomInt(0, Airports.length - 1)];\n\t},\n\n\tgetCurrentPosition : function(marker) {\n\t\treturn [ marker.getLatLng().lat, marker.getLatLng().lng ];\n\t},\n\n\trotateMarker : function(marker, angle) {\n\t\tmarker.setIconAngle(angle);\n\t\tmarker.setBearing(angle);\n\t},\n\n\tcreateFlight : function(origin) {\n\t\tvar marker = new L.Marker(\n\t\t\t\t[ origin.latitude_deg, origin.longitude_deg ], {\n\t\t\t\t\tdraggable : true,\n\t\t\t\t\ticon : Meteor.ATC.getPlane()\n\t\t\t\t});\n\t\tmarker.setIconAngle(0);\n\t\tmarker.setBearing(0);\n\t\tmarker.setDistanceTraveled(0);\n\t\tmarker.setSpeed(Meteor.ATC.getRandomInt(Meteor.ATC.speedRange[0],\n\t\t\t\tMeteor.ATC.speedRange[1]));\n\n\t\twindow.LUtil.map.addLayer(marker);\n\t\tvar destination = Meteor.ATC.getRandomAirport();\n\n\t\tvar popupText = \"<b>Interval:</b> \" + Meteor.ATC.intervalRate\n\n\t\tmarker.bindPopup(popupText);\n\t\tMeteor.ATC.rotateMarker(marker, 90);\n\n\t\tvar interval = setInterval(Meteor.ATC.directMarkerLocation,\n\t\t\t\tMeteor.ATC.squawkRate, marker, origin, destination);\n\t\tvar markInterval = {\n\t\t\tmarker : marker,\n\t\t\tinterval : interval\n\t\t};\n\n\t\tMeteor.leafnav.markIntervals.push(markInterval);\n\t\tMeteor.ATC.currentPlanesAirborne++;\n\t\tMeteor.ATC.info.update();\n\t},\n\tdirectMarkerLocation : function(marker, origin, destination) {\n\t\tvar currBearing = marker.getIconAngle();\n\n\t\tvar initialCoordinates = Meteor.ATC.getCurrentPosition(marker);\n\n\t\t// New coordinates, ie distance traveled is a function of time\n\n\t\tvar speed = Meteor.ATC.getRandomInt(marker.getSpeed() - 5, marker\n\t\t\t\t.getSpeed() + 5);// km/h\n\n\t\tvar distanceTraveled = (speed / Meteor.ATC.milliSecondInHour)\n\t\t\t\t* Meteor.ATC.squawkRate;\n\n\t\tvar newCoordinates = Meteor.leafnav.calculateNewPosition(\n\t\t\t\tinitialCoordinates, distanceTraveled, marker.getIconAngle())\n\n\t\tmarker.setLatLng(newCoordinates).update();\n\n\t\tif ((initialCoordinates[1] * newCoordinates[1]) > 0) {\n\t\t\tvar firstpolyline = new L.Polyline([ initialCoordinates,\n\t\t\t\t\tnewCoordinates ], {\n\t\t\t\tcolor : 'red',\n\t\t\t\tweight : 1,\n\t\t\t\topacity : 0.5,\n\t\t\t\tsmoothFactor : 1\n\n\t\t\t}).addTo(window.LUtil.map);\n\n\t\t\tvar interval = setInterval(Meteor.ATC.clearLine, 5000,\n\t\t\t\t\tfirstpolyline);\n\n\t\t\tvar trackLineInterval = {\n\t\t\t\tline : firstpolyline,\n\t\t\t\tinterval : interval\n\t\t\t};\n\n\t\t\tMeteor.ATC.trackLineIntervals.push(trackLineInterval);\n\n\t\t}\n\n\t\tif (Meteor.leafnav.getDistance(newCoordinates, [\n\t\t\t\tdestination.latitude_deg, destination.longitude_deg ], \"K\") < Meteor.ATC.landingDistance) {\n\t\t\tMeteor.leafnav.stopMarker(marker)\n\t\t\twindow.LUtil.map.removeLayer(marker);\n\t\t\tMeteor.ATC.currentPlanesAirborne--;\n\t\t\tMeteor.ATC.info.update();\n\t\t\treturn;\n\t\t}\n\n\t\tmarker.setDistanceTraveled(marker.getDistanceTraveled()\n\t\t\t\t+ distanceTraveled);\n\n\t\tvar bearing = Meteor.leafnav.getBearing(Meteor.ATC\n\t\t\t\t.getCurrentPosition(marker), [ destination.latitude_deg,\n\t\t\t\tdestination.longitude_deg ])\n\t\tMeteor.ATC.rotateMarker(marker, bearing);\n\t\tvar popupContent = \"<b>Squawk Rate:</b> \" + Meteor.ATC.squawkRate\n\t\t\t\t+ \"ms\" + \"<br>\" + \"<b>Speed:</b> \" + speed + \" km/h\" + \"<br>\"\n\t\t\t\t+ \"<b>Bearing:</b> \" + bearing + \"<br>\"\n\t\t\t\t+ \"<b>Distance Traveled:</b> \" + marker.getDistanceTraveled()\n\t\t\t\t+ \"<br>\" + \"<b>Origin:</b> \" + origin.name + \", \"\n\t\t\t\t+ origin.country + \" : \" + origin.region + \"<br>\"\n\t\t\t\t+ \"<b>Destination:</b> \" + destination.name + \", \"\n\t\t\t\t+ destination.country + \" : \" + destination.region\n\t\tmarker.setPopupContent(popupContent);\n\t},\n\tinit : function() {\n\t\tMeteor.ATC.info = L.control();\n\n\t\tMeteor.ATC.info.onAdd = function(map) {\n\t\t\tthis._div = L.DomUtil.create('div', 'info'); // create a div with\n\t\t\t// a class \"info\"\n\t\t\tthis.update();\n\t\t\treturn this._div;\n\t\t};\n\n\t\t// method that we will use to update the control based on feature\n\t\t// properties passed\n\t\tMeteor.ATC.info.update = function() {\n\t\t\tthis._div.innerHTML = '<h4>Planes Airborne: '\n\t\t\t\t\t+ Meteor.ATC.currentPlanesAirborne + '</h4>';\n\t\t};\n\n\t\tMeteor.ATC.info.addTo(window.LUtil.map);\n\n\t\tfor (var airport = 0; airport < Airports.length; airport++) {\n\t\t\tMeteor.ATC.startTraffic(Meteor.ATC.getRandomAirport());\n\t\t\tif (airport == 10) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t},\n\tclearLine : function(line) {\n\t\twindow.LUtil.map.removeLayer(line);\n\t\tfor (var i = 0; i < Meteor.ATC.trackLineIntervals.length; i++) {\n\t\t\tif (Meteor.ATC.trackLineIntervals[i].line === line) {\n\t\t\t\tclearInterval(Meteor.ATC.trackLineIntervals[i].interval);\n\t\t\t\tMeteor.ATC.trackLineIntervals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n}"]}